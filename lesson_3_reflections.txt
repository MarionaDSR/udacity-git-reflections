When would you want to create a remote repository rather than keeping all your work local?

When I want/need to share my project with other contributors, when I want to access my contents from 
and other computer or when I want to have a copy of the in a saver place than my computer.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

As said for when to commit, I need to choose when is a good moment to share my contents.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Fork makes a copy for me on GitHub from an other repository on GitHub (mine or not), and keeps mine linked to the original one. When I commit, I commit on MY fork.
Clone makes a copy on my pc from a repository on GitHub. When I commit, I commit on the original repository.
Branches works at local. I can make a branche to work on a specific subject of my project, and later, merge it into the trunk.

What is the benefit of having a copy of the last known state of the remote stored locally?

If you go offline, you can have all information available on that copy.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Using and other version control system, sending the files by email, sharing by USB, ... Easier because everybody knows how to do this, no commands to learn. But harder because there is no a system supporting you for doing this work.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

I would want to make changes in a separate branch when I want to keep those changes separately from master change, because their development is independent from master development (expermiental features, POCs, ...). I would want to make changes in master when my changes are part of the "daily work". It's easier to use master branch, but it's safer to user separted branches.